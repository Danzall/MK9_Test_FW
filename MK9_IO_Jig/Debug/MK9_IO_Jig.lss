
MK9_IO_Jig.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000051  00800100  00800100  0000093e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000788  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000407  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a58  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000244  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002da  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000044a  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	4f c3       	rjmp	.+1694   	; 0x6d0 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c3       	rjmp	.+1666   	; 0x6bc <__vector_14>
  3a:	00 00       	nop
  3c:	2b c3       	rjmp	.+1622   	; 0x694 <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 35       	cpi	r26, 0x51	; 81
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	1c d0       	rcall	.+56     	; 0xe2 <main>
  aa:	0d c4       	rjmp	.+2074   	; 0x8c6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <IO_Init>:
 */ 

#include <avr/io.h>

void IO_Init(){
	DDRA |= (1<<PA3)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);		//LEDs
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	88 6f       	ori	r24, 0xF8	; 248
  b2:	8a bb       	out	0x1a, r24	; 26
	DDRG |= (1<<PG2);
  b4:	e4 e6       	ldi	r30, 0x64	; 100
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	80 83       	st	Z, r24
	DDRC |= (1<<PC5)|(1<<PC6)|(1<<PC7);
  be:	84 b3       	in	r24, 0x14	; 20
  c0:	80 6e       	ori	r24, 0xE0	; 224
  c2:	84 bb       	out	0x14, r24	; 20
	
	DDRC |= (1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4);		//outputs
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	8f 61       	ori	r24, 0x1F	; 31
  c8:	84 bb       	out	0x14, r24	; 20
	DDRG |= (1<<PG1);
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	
	
	//DDRD &= ~(1<<PD5);
	//DDRD &= !_BV(PD5);
	DDRD = 0x00;
  d0:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1<<PD5);											//inputs
  d2:	95 9a       	sbi	0x12, 5	; 18
	PORTG |= (1<<PG3)|(1<<PG4);
  d4:	e5 e6       	ldi	r30, 0x65	; 101
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 83       	st	Z, r24
	PORTB |= (1<<PB7);
  de:	c7 9a       	sbi	0x18, 7	; 24
  e0:	08 95       	ret

000000e2 <main>:

volatile int OF;
double timer = 0;
int main(void)
{
    IO_Init();
  e2:	e5 df       	rcall	.-54     	; 0xae <IO_Init>
	Timer_Init();
  e4:	cf d2       	rcall	.+1438   	; 0x684 <Timer_Init>
	//Timer1Init();
	//UART_Init();
	SREG = 0x80;
  e6:	80 e8       	ldi	r24, 0x80	; 128
  e8:	8f bf       	out	0x3f, r24	; 63
  ea:	00 91 00 01 	lds	r16, 0x0100
  ee:	10 91 01 01 	lds	r17, 0x0101
  f2:	d0 91 02 01 	lds	r29, 0x0102
  f6:	c0 91 03 01 	lds	r28, 0x0103
	//sei();
	while(1)
    {
        //TODO:: Please write your application code 	
		if (OF == 1){
  fa:	20 91 06 01 	lds	r18, 0x0106
  fe:	30 91 07 01 	lds	r19, 0x0107
 102:	21 30       	cpi	r18, 0x01	; 1
 104:	31 05       	cpc	r19, r1
 106:	89 f4       	brne	.+34     	; 0x12a <main+0x48>
			OF = 0;
 108:	10 92 07 01 	sts	0x0107, r1
 10c:	10 92 06 01 	sts	0x0106, r1
			timer++;
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	5f e3       	ldi	r21, 0x3F	; 63
 118:	60 2f       	mov	r22, r16
 11a:	71 2f       	mov	r23, r17
 11c:	8d 2f       	mov	r24, r29
 11e:	9c 2f       	mov	r25, r28
 120:	f5 d2       	rcall	.+1514   	; 0x70c <__addsf3>
 122:	06 2f       	mov	r16, r22
 124:	17 2f       	mov	r17, r23
 126:	d8 2f       	mov	r29, r24
 128:	c9 2f       	mov	r28, r25
			
		}	
		//
		
		if (timer == 100){						//1 sec loop
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	48 ec       	ldi	r20, 0xC8	; 200
 130:	52 e4       	ldi	r21, 0x42	; 66
 132:	60 2f       	mov	r22, r16
 134:	71 2f       	mov	r23, r17
 136:	8d 2f       	mov	r24, r29
 138:	9c 2f       	mov	r25, r28
 13a:	4c d3       	rcall	.+1688   	; 0x7d4 <__cmpsf2>
 13c:	81 11       	cpse	r24, r1
 13e:	dd cf       	rjmp	.-70     	; 0xfa <main+0x18>
			timer = 0;
 140:	10 92 00 01 	sts	0x0100, r1
 144:	10 92 01 01 	sts	0x0101, r1
 148:	10 92 02 01 	sts	0x0102, r1
 14c:	10 92 03 01 	sts	0x0103, r1
			//SendChar(0x31);
			OW_Reset_Wait();
 150:	7d d2       	rcall	.+1274   	; 0x64c <OW_Reset_Wait>
 152:	cb cf       	rjmp	.-106    	; 0xea <main+0x8>

00000154 <Faulty_OP>:
	LED3Port ^= (1<<LED3Pin);
	LED4Port ^= (1<<LED4Pin);
	LED5Port ^= (1<<LED5Pin);
	LED6Port ^= (1<<LED6Pin);
	LED7Port ^= (1<<LED7Pin);
	LED8Port ^= (1<<LED8Pin);
 154:	20 91 4b 01 	lds	r18, 0x014B
 158:	30 91 4c 01 	lds	r19, 0x014C
 15c:	80 91 2c 01 	lds	r24, 0x012C
 160:	90 91 2d 01 	lds	r25, 0x012D
 164:	28 17       	cp	r18, r24
 166:	39 07       	cpc	r19, r25
 168:	39 f0       	breq	.+14     	; 0x178 <Faulty_OP+0x24>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 19 01 	sts	0x0119, r25
 172:	80 93 18 01 	sts	0x0118, r24
 176:	04 c0       	rjmp	.+8      	; 0x180 <Faulty_OP+0x2c>
 178:	10 92 19 01 	sts	0x0119, r1
 17c:	10 92 18 01 	sts	0x0118, r1
 180:	20 91 4f 01 	lds	r18, 0x014F
 184:	30 91 50 01 	lds	r19, 0x0150
 188:	80 91 30 01 	lds	r24, 0x0130
 18c:	90 91 31 01 	lds	r25, 0x0131
 190:	28 17       	cp	r18, r24
 192:	39 07       	cpc	r19, r25
 194:	39 f0       	breq	.+14     	; 0x1a4 <Faulty_OP+0x50>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 1d 01 	sts	0x011D, r25
 19e:	80 93 1c 01 	sts	0x011C, r24
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <Faulty_OP+0x58>
 1a4:	10 92 1d 01 	sts	0x011D, r1
 1a8:	10 92 1c 01 	sts	0x011C, r1
 1ac:	20 91 4d 01 	lds	r18, 0x014D
 1b0:	30 91 4e 01 	lds	r19, 0x014E
 1b4:	80 91 2e 01 	lds	r24, 0x012E
 1b8:	90 91 2f 01 	lds	r25, 0x012F
 1bc:	28 17       	cp	r18, r24
 1be:	39 07       	cpc	r19, r25
 1c0:	39 f0       	breq	.+14     	; 0x1d0 <Faulty_OP+0x7c>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 1b 01 	sts	0x011B, r25
 1ca:	80 93 1a 01 	sts	0x011A, r24
 1ce:	08 95       	ret
 1d0:	10 92 1b 01 	sts	0x011B, r1
 1d4:	10 92 1a 01 	sts	0x011A, r1
 1d8:	08 95       	ret

000001da <ReadBit>:
 1da:	10 92 33 01 	sts	0x0133, r1
 1de:	10 92 32 01 	sts	0x0132, r1
 1e2:	85 99       	sbic	0x10, 5	; 16
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <ReadBit+0x12>
 1e6:	85 9b       	sbis	0x10, 5	; 16
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <ReadBit+0x18>
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <ReadBit+0x2e>
 1ec:	85 99       	sbic	0x10, 5	; 16
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <ReadBit+0x12>
 1f0:	fa cf       	rjmp	.-12     	; 0x1e6 <ReadBit+0xc>
 1f2:	80 91 32 01 	lds	r24, 0x0132
 1f6:	90 91 33 01 	lds	r25, 0x0133
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 33 01 	sts	0x0133, r25
 200:	80 93 32 01 	sts	0x0132, r24
 204:	85 9b       	sbis	0x10, 5	; 16
 206:	f5 cf       	rjmp	.-22     	; 0x1f2 <ReadBit+0x18>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	20 91 32 01 	lds	r18, 0x0132
 210:	30 91 33 01 	lds	r19, 0x0133
 214:	25 31       	cpi	r18, 0x15	; 21
 216:	31 05       	cpc	r19, r1
 218:	14 f0       	brlt	.+4      	; 0x21e <ReadBit+0x44>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret

00000220 <WriteBit>:
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	39 f4       	brne	.+14     	; 0x232 <WriteBit+0x12>
 224:	8f e0       	ldi	r24, 0x0F	; 15
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 33 01 	sts	0x0133, r25
 22c:	80 93 32 01 	sts	0x0132, r24
 230:	06 c0       	rjmp	.+12     	; 0x23e <WriteBit+0x1e>
 232:	80 e5       	ldi	r24, 0x50	; 80
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 33 01 	sts	0x0133, r25
 23a:	80 93 32 01 	sts	0x0132, r24
 23e:	e5 e6       	ldi	r30, 0x65	; 101
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
 248:	80 91 32 01 	lds	r24, 0x0132
 24c:	90 91 33 01 	lds	r25, 0x0133
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	39 f0       	breq	.+14     	; 0x262 <WriteBit+0x42>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	e9 f7       	brne	.-6      	; 0x254 <WriteBit+0x34>
 25a:	10 92 33 01 	sts	0x0133, r1
 25e:	10 92 32 01 	sts	0x0132, r1
 262:	e5 e6       	ldi	r30, 0x65	; 101
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	80 83       	st	Z, r24
 26c:	85 9b       	sbis	0x10, 5	; 16
 26e:	fe cf       	rjmp	.-4      	; 0x26c <WriteBit+0x4c>
 270:	08 95       	ret

00000272 <WriteByte>:
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	18 2f       	mov	r17, r24
 27a:	c8 e0       	ldi	r28, 0x08	; 8
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	85 9b       	sbis	0x10, 5	; 16
 280:	02 c0       	rjmp	.+4      	; 0x286 <WriteByte+0x14>
 282:	85 99       	sbic	0x10, 5	; 16
 284:	fe cf       	rjmp	.-4      	; 0x282 <WriteByte+0x10>
 286:	10 ff       	sbrs	r17, 0
 288:	03 c0       	rjmp	.+6      	; 0x290 <WriteByte+0x1e>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	c9 df       	rcall	.-110    	; 0x220 <WriteBit>
 28e:	02 c0       	rjmp	.+4      	; 0x294 <WriteByte+0x22>
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	c6 df       	rcall	.-116    	; 0x220 <WriteBit>
 294:	16 95       	lsr	r17
 296:	21 97       	sbiw	r28, 0x01	; 1
 298:	20 97       	sbiw	r28, 0x00	; 0
 29a:	89 f7       	brne	.-30     	; 0x27e <WriteByte+0xc>
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <WriteString>:
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	c4 e3       	ldi	r28, 0x34	; 52
 2ae:	d1 e0       	ldi	r29, 0x01	; 1
 2b0:	08 e3       	ldi	r16, 0x38	; 56
 2b2:	11 e0       	ldi	r17, 0x01	; 1
 2b4:	89 91       	ld	r24, Y+
 2b6:	dd df       	rcall	.-70     	; 0x272 <WriteByte>
 2b8:	c0 17       	cp	r28, r16
 2ba:	d1 07       	cpc	r29, r17
 2bc:	d9 f7       	brne	.-10     	; 0x2b4 <WriteString+0x10>
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <OK>:
 2c8:	80 e2       	ldi	r24, 0x20	; 32
 2ca:	80 93 34 01 	sts	0x0134, r24
 2ce:	ea cf       	rjmp	.-44     	; 0x2a4 <WriteString>
 2d0:	08 95       	ret

000002d2 <Reset>:
 2d2:	e5 e6       	ldi	r30, 0x65	; 101
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	80 83       	st	Z, r24
 2dc:	ac 98       	cbi	0x15, 4	; 21
 2de:	a9 98       	cbi	0x15, 1	; 21
 2e0:	a8 98       	cbi	0x15, 0	; 21
 2e2:	ab 98       	cbi	0x15, 3	; 21
 2e4:	aa 98       	cbi	0x15, 2	; 21
 2e6:	10 92 0b 01 	sts	0x010B, r1
 2ea:	10 92 0a 01 	sts	0x010A, r1
 2ee:	10 92 17 01 	sts	0x0117, r1
 2f2:	10 92 16 01 	sts	0x0116, r1
 2f6:	10 92 15 01 	sts	0x0115, r1
 2fa:	10 92 14 01 	sts	0x0114, r1
 2fe:	10 92 0d 01 	sts	0x010D, r1
 302:	10 92 0c 01 	sts	0x010C, r1
 306:	10 92 0f 01 	sts	0x010F, r1
 30a:	10 92 0e 01 	sts	0x010E, r1
 30e:	10 92 11 01 	sts	0x0111, r1
 312:	10 92 10 01 	sts	0x0110, r1
 316:	10 92 19 01 	sts	0x0119, r1
 31a:	10 92 18 01 	sts	0x0118, r1
 31e:	10 92 1d 01 	sts	0x011D, r1
 322:	10 92 1c 01 	sts	0x011C, r1
 326:	10 92 1b 01 	sts	0x011B, r1
 32a:	10 92 1a 01 	sts	0x011A, r1
 32e:	08 95       	ret

00000330 <ResetLED>:
 330:	db 98       	cbi	0x1b, 3	; 27
 332:	dc 98       	cbi	0x1b, 4	; 27
 334:	dd 98       	cbi	0x1b, 5	; 27
 336:	de 98       	cbi	0x1b, 6	; 27
 338:	df 98       	cbi	0x1b, 7	; 27
 33a:	e5 e6       	ldi	r30, 0x65	; 101
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	8b 7f       	andi	r24, 0xFB	; 251
 342:	80 83       	st	Z, r24
 344:	af 98       	cbi	0x15, 7	; 21
 346:	ae 98       	cbi	0x15, 6	; 21
 348:	ad 98       	cbi	0x15, 5	; 21
 34a:	08 95       	ret

0000034c <Set>:
 34c:	e5 e6       	ldi	r30, 0x65	; 101
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	82 60       	ori	r24, 0x02	; 2
 354:	80 83       	st	Z, r24
 356:	ac 9a       	sbi	0x15, 4	; 21
 358:	a9 9a       	sbi	0x15, 1	; 21
 35a:	a8 9a       	sbi	0x15, 0	; 21
 35c:	ab 9a       	sbi	0x15, 3	; 21
 35e:	aa 9a       	sbi	0x15, 2	; 21
 360:	08 95       	ret

00000362 <DisplayFault>:
	//LED9Port ^= (1<<LED9Pin);
}

void DisplayFault(){
	ResetLED();
 362:	e6 df       	rcall	.-52     	; 0x330 <ResetLED>
	if (faulty.ignition == 1) LED1Port|=_BV(LED1Pin );
 364:	80 91 0a 01 	lds	r24, 0x010A
 368:	90 91 0b 01 	lds	r25, 0x010B
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	09 f4       	brne	.+2      	; 0x372 <DisplayFault+0x10>
 370:	db 9a       	sbi	0x1b, 3	; 27
	if (faulty.panic == 1) LED2Port|=_BV(LED2Pin );
 372:	80 91 16 01 	lds	r24, 0x0116
 376:	90 91 17 01 	lds	r25, 0x0117
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	09 f4       	brne	.+2      	; 0x380 <DisplayFault+0x1e>
 37e:	dc 9a       	sbi	0x1b, 4	; 27
	if (faulty.rpm == 1) LED3Port|=_BV(LED3Pin );
 380:	80 91 14 01 	lds	r24, 0x0114
 384:	90 91 15 01 	lds	r25, 0x0115
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	09 f4       	brne	.+2      	; 0x38e <DisplayFault+0x2c>
 38c:	dd 9a       	sbi	0x1b, 5	; 27
	if (faulty.inputA == 1) LED4Port|=_BV(LED4Pin );
 38e:	80 91 0c 01 	lds	r24, 0x010C
 392:	90 91 0d 01 	lds	r25, 0x010D
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	09 f4       	brne	.+2      	; 0x39c <DisplayFault+0x3a>
 39a:	de 9a       	sbi	0x1b, 6	; 27
	if (faulty.inputB == 1) LED5Port|=_BV(LED5Pin );
 39c:	80 91 0e 01 	lds	r24, 0x010E
 3a0:	90 91 0f 01 	lds	r25, 0x010F
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DisplayFault+0x48>
 3a8:	df 9a       	sbi	0x1b, 7	; 27
	if (faulty.inputC == 1) LED6Port|=_BV(LED6Pin );
 3aa:	80 91 10 01 	lds	r24, 0x0110
 3ae:	90 91 11 01 	lds	r25, 0x0111
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <DisplayFault+0x5e>
 3b6:	e5 e6       	ldi	r30, 0x65	; 101
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	84 60       	ori	r24, 0x04	; 4
 3be:	80 83       	st	Z, r24
	
	if (faulty.immob == 1) LED7Port|=_BV(LED7Pin );
 3c0:	80 91 18 01 	lds	r24, 0x0118
 3c4:	90 91 19 01 	lds	r25, 0x0119
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DisplayFault+0x6c>
 3cc:	af 9a       	sbi	0x15, 7	; 21
	if (faulty.tagled == 1) LED8Port|=_BV(LED8Pin );
 3ce:	80 91 1c 01 	lds	r24, 0x011C
 3d2:	90 91 1d 01 	lds	r25, 0x011D
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <DisplayFault+0x7a>
 3da:	ae 9a       	sbi	0x15, 6	; 21
	if (faulty.outputA == 1) LED9Port|=_BV(LED9Pin );
 3dc:	80 91 1a 01 	lds	r24, 0x011A
 3e0:	90 91 1b 01 	lds	r25, 0x011B
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	09 f4       	brne	.+2      	; 0x3ea <DisplayFault+0x88>
 3e8:	ad 9a       	sbi	0x15, 5	; 21
 3ea:	08 95       	ret

000003ec <ReadCommand>:
	ReadCommand();
	//LED_Toggle();
	//
}

void ReadCommand(){
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
	int bit;
	cmd = 0;
 3f0:	10 92 3c 01 	sts	0x013C, r1
 3f4:	c8 e0       	ldi	r28, 0x08	; 8
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
	for (bit = 0; bit < 8; bit++){
		//cmd = ReadBit();
		cmd =  cmd >> 1;
 3f8:	80 91 3c 01 	lds	r24, 0x013C
 3fc:	86 95       	lsr	r24
 3fe:	80 93 3c 01 	sts	0x013C, r24
		if (ReadBit() == 1) cmd |= 0x80;		
 402:	eb de       	rcall	.-554    	; 0x1da <ReadBit>
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	29 f4       	brne	.+10     	; 0x412 <ReadCommand+0x26>
 408:	80 91 3c 01 	lds	r24, 0x013C
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	80 93 3c 01 	sts	0x013C, r24
 412:	21 97       	sbiw	r28, 0x01	; 1
}

void ReadCommand(){
	int bit;
	cmd = 0;
	for (bit = 0; bit < 8; bit++){
 414:	20 97       	sbiw	r28, 0x00	; 0
 416:	81 f7       	brne	.-32     	; 0x3f8 <ReadCommand+0xc>
		//cmd = ReadBit();
		cmd =  cmd >> 1;
		if (ReadBit() == 1) cmd |= 0x80;		
		//if (cmd == 0x48) LED4Port ^= (1<<LED4Pin);
	}
	if (cmd == 9){ 
 418:	80 91 3c 01 	lds	r24, 0x013C
 41c:	89 30       	cpi	r24, 0x09	; 9
 41e:	19 f4       	brne	.+6      	; 0x426 <ReadCommand+0x3a>
		Reset();	
 420:	58 df       	rcall	.-336    	; 0x2d2 <Reset>
		OK();
 422:	52 df       	rcall	.-348    	; 0x2c8 <OK>
		ResetLED();
 424:	85 df       	rcall	.-246    	; 0x330 <ResetLED>
	}
	
	if (cmd == 0x10){
 426:	80 91 3c 01 	lds	r24, 0x013C
 42a:	80 31       	cpi	r24, 0x10	; 16
 42c:	11 f4       	brne	.+4      	; 0x432 <ReadCommand+0x46>
		Set();
 42e:	8e df       	rcall	.-228    	; 0x34c <Set>
		OK();
 430:	4b df       	rcall	.-362    	; 0x2c8 <OK>
	}
	if (cmd == 0x11){															//read default outputs
 432:	80 91 3c 01 	lds	r24, 0x013C
 436:	81 31       	cpi	r24, 0x11	; 17
 438:	61 f5       	brne	.+88     	; 0x492 <ReadCommand+0xa6>
		if((Immob_Port&_BV(Immob_Pin))==_BV(Immob_Pin)) Default.immob = 0;
 43a:	b7 9b       	sbis	0x16, 7	; 22
 43c:	05 c0       	rjmp	.+10     	; 0x448 <ReadCommand+0x5c>
 43e:	10 92 4c 01 	sts	0x014C, r1
 442:	10 92 4b 01 	sts	0x014B, r1
 446:	06 c0       	rjmp	.+12     	; 0x454 <ReadCommand+0x68>
		else Default.immob = 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	90 93 4c 01 	sts	0x014C, r25
 450:	80 93 4b 01 	sts	0x014B, r24
		if((OutputA_Port&_BV(OutputA_Pin))==_BV(OutputA_Pin)) Default.outputA = 0;
 454:	80 91 63 00 	lds	r24, 0x0063
 458:	84 ff       	sbrs	r24, 4
 45a:	05 c0       	rjmp	.+10     	; 0x466 <ReadCommand+0x7a>
 45c:	10 92 4e 01 	sts	0x014E, r1
 460:	10 92 4d 01 	sts	0x014D, r1
 464:	06 c0       	rjmp	.+12     	; 0x472 <ReadCommand+0x86>
		else Default.outputA = 1;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 93 4e 01 	sts	0x014E, r25
 46e:	80 93 4d 01 	sts	0x014D, r24
		if((TagLED_Port&_BV(TagLED_Pin))==_BV(TagLED_Pin)) Default.tagled = 0;
 472:	80 91 63 00 	lds	r24, 0x0063
 476:	83 ff       	sbrs	r24, 3
 478:	05 c0       	rjmp	.+10     	; 0x484 <ReadCommand+0x98>
 47a:	10 92 50 01 	sts	0x0150, r1
 47e:	10 92 4f 01 	sts	0x014F, r1
 482:	06 c0       	rjmp	.+12     	; 0x490 <ReadCommand+0xa4>
		else Default.tagled = 1;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	90 93 50 01 	sts	0x0150, r25
 48c:	80 93 4f 01 	sts	0x014F, r24
		OK();
 490:	1b df       	rcall	.-458    	; 0x2c8 <OK>
	}
	if (cmd == 0x12){															//read trigerd outputs
 492:	80 91 3c 01 	lds	r24, 0x013C
 496:	82 31       	cpi	r24, 0x12	; 18
 498:	69 f5       	brne	.+90     	; 0x4f4 <ReadCommand+0x108>
		if((Immob_Port&_BV(Immob_Pin))==_BV(Immob_Pin)) triggered.immob = 1;
 49a:	b7 9b       	sbis	0x16, 7	; 22
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <ReadCommand+0xc0>
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 2d 01 	sts	0x012D, r25
 4a6:	80 93 2c 01 	sts	0x012C, r24
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <ReadCommand+0xc8>
		else triggered.immob = 0;
 4ac:	10 92 2d 01 	sts	0x012D, r1
 4b0:	10 92 2c 01 	sts	0x012C, r1
		if((OutputA_Port&_BV(OutputA_Pin))==_BV(OutputA_Pin)) triggered.outputA = 1;
 4b4:	80 91 63 00 	lds	r24, 0x0063
 4b8:	84 ff       	sbrs	r24, 4
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <ReadCommand+0xde>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 2f 01 	sts	0x012F, r25
 4c4:	80 93 2e 01 	sts	0x012E, r24
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <ReadCommand+0xe6>
		else triggered.outputA = 0;
 4ca:	10 92 2f 01 	sts	0x012F, r1
 4ce:	10 92 2e 01 	sts	0x012E, r1
		if((TagLED_Port&_BV(TagLED_Pin))==_BV(TagLED_Pin)) triggered.tagled = 1;
 4d2:	80 91 63 00 	lds	r24, 0x0063
 4d6:	83 ff       	sbrs	r24, 3
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <ReadCommand+0xfc>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	90 93 31 01 	sts	0x0131, r25
 4e2:	80 93 30 01 	sts	0x0130, r24
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <ReadCommand+0x104>
		else triggered.tagled = 0;
 4e8:	10 92 31 01 	sts	0x0131, r1
 4ec:	10 92 30 01 	sts	0x0130, r1
		OK();
 4f0:	eb de       	rcall	.-554    	; 0x2c8 <OK>
		Faulty_OP();
 4f2:	30 de       	rcall	.-928    	; 0x154 <Faulty_OP>
	}
	if (cmd == 0x13){															//send nubmer of faulty outputs
 4f4:	80 91 3c 01 	lds	r24, 0x013C
 4f8:	83 31       	cpi	r24, 0x13	; 19
 4fa:	b9 f4       	brne	.+46     	; 0x52a <ReadCommand+0x13e>
		
		faulty_outputs = faulty.immob + faulty.outputA + faulty.tagled;
 4fc:	20 91 18 01 	lds	r18, 0x0118
 500:	30 91 19 01 	lds	r19, 0x0119
 504:	80 91 1a 01 	lds	r24, 0x011A
 508:	90 91 1b 01 	lds	r25, 0x011B
 50c:	82 0f       	add	r24, r18
 50e:	93 1f       	adc	r25, r19
 510:	20 91 1c 01 	lds	r18, 0x011C
 514:	30 91 1d 01 	lds	r19, 0x011D
 518:	82 0f       	add	r24, r18
 51a:	93 1f       	adc	r25, r19
 51c:	90 93 09 01 	sts	0x0109, r25
 520:	80 93 08 01 	sts	0x0108, r24
		OW_String[0] = faulty_outputs;	
 524:	80 93 34 01 	sts	0x0134, r24
		WriteString();	
 528:	bd de       	rcall	.-646    	; 0x2a4 <WriteString>
	}
	if (cmd == 0x14){															//send faulty outputs
 52a:	80 91 3c 01 	lds	r24, 0x013C
 52e:	84 31       	cpi	r24, 0x14	; 20
 530:	e1 f4       	brne	.+56     	; 0x56a <ReadCommand+0x17e>
		if (faulty.immob == 1) OW_String[0] = 1;
 532:	80 91 18 01 	lds	r24, 0x0118
 536:	90 91 19 01 	lds	r25, 0x0119
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	19 f4       	brne	.+6      	; 0x544 <ReadCommand+0x158>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 34 01 	sts	0x0134, r24
		if (faulty.tagled == 1) OW_String[1] = 1;
 544:	80 91 1c 01 	lds	r24, 0x011C
 548:	90 91 1d 01 	lds	r25, 0x011D
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	19 f4       	brne	.+6      	; 0x556 <ReadCommand+0x16a>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 35 01 	sts	0x0135, r24
		if (faulty.outputA == 1) OW_String[2] = 1;
 556:	80 91 1a 01 	lds	r24, 0x011A
 55a:	90 91 1b 01 	lds	r25, 0x011B
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	19 f4       	brne	.+6      	; 0x568 <ReadCommand+0x17c>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 36 01 	sts	0x0136, r24
		WriteString();
 568:	9d de       	rcall	.-710    	; 0x2a4 <WriteString>
	}
	if (cmd == 0x15){
 56a:	80 91 3c 01 	lds	r24, 0x013C
 56e:	85 31       	cpi	r24, 0x15	; 21
 570:	09 f4       	brne	.+2      	; 0x574 <ReadCommand+0x188>
		DisplayFault();
 572:	f7 de       	rcall	.-530    	; 0x362 <DisplayFault>
	}
	if (cmd > 128){															//decode input faults
 574:	80 91 3c 01 	lds	r24, 0x013C
 578:	81 38       	cpi	r24, 0x81	; 129
 57a:	b0 f1       	brcs	.+108    	; 0x5e8 <ReadCommand+0x1fc>
		if ((cmd & 0x01) == 0x01){ 
 57c:	80 ff       	sbrs	r24, 0
 57e:	0a c0       	rjmp	.+20     	; 0x594 <ReadCommand+0x1a8>
			LED8Port ^= (1<<LED8Pin);
 580:	95 b3       	in	r25, 0x15	; 21
 582:	80 e4       	ldi	r24, 0x40	; 64
 584:	89 27       	eor	r24, r25
 586:	85 bb       	out	0x15, r24	; 21
			faulty.ignition = 1;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	90 93 0b 01 	sts	0x010B, r25
 590:	80 93 0a 01 	sts	0x010A, r24
		}
		if ((cmd & 0x02) == 0x02) faulty.panic = 1;
 594:	20 91 3c 01 	lds	r18, 0x013C
 598:	21 ff       	sbrs	r18, 1
 59a:	06 c0       	rjmp	.+12     	; 0x5a8 <ReadCommand+0x1bc>
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	90 93 17 01 	sts	0x0117, r25
 5a4:	80 93 16 01 	sts	0x0116, r24
		if ((cmd & 0x04) == 0x04) faulty.rpm = 1;
 5a8:	22 ff       	sbrs	r18, 2
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <ReadCommand+0x1cc>
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	90 93 15 01 	sts	0x0115, r25
 5b4:	80 93 14 01 	sts	0x0114, r24
		if ((cmd & 0x08) == 0x08) faulty.inputA = 1;
 5b8:	23 ff       	sbrs	r18, 3
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <ReadCommand+0x1dc>
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	90 93 0d 01 	sts	0x010D, r25
 5c4:	80 93 0c 01 	sts	0x010C, r24
		if ((cmd & 0x10) == 0x10) faulty.inputB = 1;
 5c8:	24 ff       	sbrs	r18, 4
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <ReadCommand+0x1ec>
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	90 93 0f 01 	sts	0x010F, r25
 5d4:	80 93 0e 01 	sts	0x010E, r24
		if ((cmd & 0x20) == 0x20) faulty.inputC = 1;
 5d8:	25 ff       	sbrs	r18, 5
 5da:	06 c0       	rjmp	.+12     	; 0x5e8 <ReadCommand+0x1fc>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	90 93 11 01 	sts	0x0111, r25
 5e4:	80 93 10 01 	sts	0x0110, r24
	}
}
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <Presence>:
	//if (delay > 415) Presence();							//415 = 680us
	if (delay > 380) Presence();							//415 = 680us
	//if ((PIND5&_BV(1<<PD5)) == 0) PORTA ^= (1<<PA6); 
} 

void Presence(){	
 5ee:	89 e1       	ldi	r24, 0x19	; 25
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	01 97       	sbiw	r24, 0x01	; 1
	delay = 26;
	while (delay > 1) delay--;
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	e9 f7       	brne	.-6      	; 0x5f2 <Presence+0x4>
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	90 93 33 01 	sts	0x0133, r25
 600:	80 93 32 01 	sts	0x0132, r24
	//Delay(20);
	TagInPort ^= (1<<TagInPin);
 604:	e5 e6       	ldi	r30, 0x65	; 101
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	90 81       	ld	r25, Z
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	89 27       	eor	r24, r25
 60e:	80 83       	st	Z, r24
 610:	83 e0       	ldi	r24, 0x03	; 3
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	01 97       	sbiw	r24, 0x01	; 1
	delay = 260;
	while (delay > 1) delay--;
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	e9 f7       	brne	.-6      	; 0x614 <Presence+0x26>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	90 93 33 01 	sts	0x0133, r25
 622:	80 93 32 01 	sts	0x0132, r24
	//Delay(200);
	TagInPort ^= (1<<TagInPin);
 626:	e5 e6       	ldi	r30, 0x65	; 101
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	90 81       	ld	r25, Z
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	89 27       	eor	r24, r25
 630:	80 83       	st	Z, r24
 632:	8d e2       	ldi	r24, 0x2D	; 45
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	01 97       	sbiw	r24, 0x01	; 1
	delay = 46;
	while (delay > 1) delay--;
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	e9 f7       	brne	.-6      	; 0x636 <Presence+0x48>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	90 93 33 01 	sts	0x0133, r25
 644:	80 93 32 01 	sts	0x0132, r24
	//Delay(20);
	ReadCommand();
 648:	d1 ce       	rjmp	.-606    	; 0x3ec <ReadCommand>
 64a:	08 95       	ret

0000064c <OW_Reset_Wait>:
out triggered;
out faulty;
int faulty_outputs;

void OW_Reset_Wait(){										//1000 count = 750us	//
	delay = 0;
 64c:	10 92 33 01 	sts	0x0133, r1
 650:	10 92 32 01 	sts	0x0132, r1
	if((TagOutPort&_BV(TagOutPin))==_BV(TagOutPin))
 654:	85 99       	sbic	0x10, 5	; 16
 656:	03 c0       	rjmp	.+6      	; 0x65e <OW_Reset_Wait+0x12>
		while ((TagOutPort&_BV(TagOutPin)) == _BV(TagOutPin)) ;				//wait while high
		//ResetT1();
	while ((TagOutPort&_BV(TagOutPin)) == 0){ 
 658:	85 9b       	sbis	0x10, 5	; 16
 65a:	04 c0       	rjmp	.+8      	; 0x664 <OW_Reset_Wait+0x18>
 65c:	08 95       	ret
int faulty_outputs;

void OW_Reset_Wait(){										//1000 count = 750us	//
	delay = 0;
	if((TagOutPort&_BV(TagOutPin))==_BV(TagOutPin))
		while ((TagOutPort&_BV(TagOutPin)) == _BV(TagOutPin)) ;				//wait while high
 65e:	85 99       	sbic	0x10, 5	; 16
 660:	fe cf       	rjmp	.-4      	; 0x65e <OW_Reset_Wait+0x12>
 662:	fa cf       	rjmp	.-12     	; 0x658 <OW_Reset_Wait+0xc>
		//ResetT1();
	while ((TagOutPort&_BV(TagOutPin)) == 0){ 
		//
		delay++;											//count while low
 664:	80 91 32 01 	lds	r24, 0x0132
 668:	90 91 33 01 	lds	r25, 0x0133
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	90 93 33 01 	sts	0x0133, r25
 672:	80 93 32 01 	sts	0x0132, r24
void OW_Reset_Wait(){										//1000 count = 750us	//
	delay = 0;
	if((TagOutPort&_BV(TagOutPin))==_BV(TagOutPin))
		while ((TagOutPort&_BV(TagOutPin)) == _BV(TagOutPin)) ;				//wait while high
		//ResetT1();
	while ((TagOutPort&_BV(TagOutPin)) == 0){ 
 676:	85 9b       	sbis	0x10, 5	; 16
 678:	f5 cf       	rjmp	.-22     	; 0x664 <OW_Reset_Wait+0x18>
		delay++;											//count while low
	}
	//if ((PIND&_BV(PD5)) == _BV(PD5)) 
	//delay = ReadT1();
	//if (delay > 415) Presence();							//415 = 680us
	if (delay > 380) Presence();							//415 = 680us
 67a:	8d 37       	cpi	r24, 0x7D	; 125
 67c:	91 40       	sbci	r25, 0x01	; 1
 67e:	0c f0       	brlt	.+2      	; 0x682 <OW_Reset_Wait+0x36>
 680:	b6 cf       	rjmp	.-148    	; 0x5ee <Presence>
 682:	08 95       	ret

00000684 <Timer_Init>:
}

int ReadT1(){
	
	return time;
}
 684:	8f e0       	ldi	r24, 0x0F	; 15
 686:	83 bf       	out	0x33, r24	; 51
 688:	8d e4       	ldi	r24, 0x4D	; 77
 68a:	81 bf       	out	0x31, r24	; 49
 68c:	87 b7       	in	r24, 0x37	; 55
 68e:	82 60       	ori	r24, 0x02	; 2
 690:	87 bf       	out	0x37, r24	; 55
 692:	08 95       	ret

00000694 <__vector_15>:

SIGNAL (TIMER0_COMP_vect){
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	8f 93       	push	r24
 6a0:	9f 93       	push	r25
	OF = 1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	90 93 07 01 	sts	0x0107, r25
 6aa:	80 93 06 01 	sts	0x0106, r24
}
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <__vector_14>:

SIGNAL (TIMER1_OVF_vect	){
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
	
}
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_12>:

SIGNAL (TIMER1_COMPA_vect){
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
	OF = 1;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	90 93 07 01 	sts	0x0107, r25
 6e6:	80 93 06 01 	sts	0x0106, r24
	time++;
 6ea:	80 91 04 01 	lds	r24, 0x0104
 6ee:	90 91 05 01 	lds	r25, 0x0105
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	90 93 05 01 	sts	0x0105, r25
 6f8:	80 93 04 01 	sts	0x0104, r24
 6fc:	9f 91       	pop	r25
 6fe:	8f 91       	pop	r24
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <__subsf3>:
 70a:	50 58       	subi	r21, 0x80	; 128

0000070c <__addsf3>:
 70c:	bb 27       	eor	r27, r27
 70e:	aa 27       	eor	r26, r26
 710:	0e d0       	rcall	.+28     	; 0x72e <__addsf3x>
 712:	9f c0       	rjmp	.+318    	; 0x852 <__fp_round>
 714:	90 d0       	rcall	.+288    	; 0x836 <__fp_pscA>
 716:	30 f0       	brcs	.+12     	; 0x724 <__addsf3+0x18>
 718:	95 d0       	rcall	.+298    	; 0x844 <__fp_pscB>
 71a:	20 f0       	brcs	.+8      	; 0x724 <__addsf3+0x18>
 71c:	31 f4       	brne	.+12     	; 0x72a <__addsf3+0x1e>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	11 f4       	brne	.+4      	; 0x726 <__addsf3+0x1a>
 722:	1e f4       	brtc	.+6      	; 0x72a <__addsf3+0x1e>
 724:	85 c0       	rjmp	.+266    	; 0x830 <__fp_nan>
 726:	0e f4       	brtc	.+2      	; 0x72a <__addsf3+0x1e>
 728:	e0 95       	com	r30
 72a:	e7 fb       	bst	r30, 7
 72c:	7b c0       	rjmp	.+246    	; 0x824 <__fp_inf>

0000072e <__addsf3x>:
 72e:	e9 2f       	mov	r30, r25
 730:	a1 d0       	rcall	.+322    	; 0x874 <__fp_split3>
 732:	80 f3       	brcs	.-32     	; 0x714 <__addsf3+0x8>
 734:	ba 17       	cp	r27, r26
 736:	62 07       	cpc	r22, r18
 738:	73 07       	cpc	r23, r19
 73a:	84 07       	cpc	r24, r20
 73c:	95 07       	cpc	r25, r21
 73e:	18 f0       	brcs	.+6      	; 0x746 <__addsf3x+0x18>
 740:	71 f4       	brne	.+28     	; 0x75e <__addsf3x+0x30>
 742:	9e f5       	brtc	.+102    	; 0x7aa <__addsf3x+0x7c>
 744:	b9 c0       	rjmp	.+370    	; 0x8b8 <__fp_zero>
 746:	0e f4       	brtc	.+2      	; 0x74a <__addsf3x+0x1c>
 748:	e0 95       	com	r30
 74a:	0b 2e       	mov	r0, r27
 74c:	ba 2f       	mov	r27, r26
 74e:	a0 2d       	mov	r26, r0
 750:	0b 01       	movw	r0, r22
 752:	b9 01       	movw	r22, r18
 754:	90 01       	movw	r18, r0
 756:	0c 01       	movw	r0, r24
 758:	ca 01       	movw	r24, r20
 75a:	a0 01       	movw	r20, r0
 75c:	11 24       	eor	r1, r1
 75e:	ff 27       	eor	r31, r31
 760:	59 1b       	sub	r21, r25
 762:	99 f0       	breq	.+38     	; 0x78a <__addsf3x+0x5c>
 764:	59 3f       	cpi	r21, 0xF9	; 249
 766:	50 f4       	brcc	.+20     	; 0x77c <__addsf3x+0x4e>
 768:	50 3e       	cpi	r21, 0xE0	; 224
 76a:	68 f1       	brcs	.+90     	; 0x7c6 <__addsf3x+0x98>
 76c:	1a 16       	cp	r1, r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	a2 2f       	mov	r26, r18
 772:	23 2f       	mov	r18, r19
 774:	34 2f       	mov	r19, r20
 776:	44 27       	eor	r20, r20
 778:	58 5f       	subi	r21, 0xF8	; 248
 77a:	f3 cf       	rjmp	.-26     	; 0x762 <__addsf3x+0x34>
 77c:	46 95       	lsr	r20
 77e:	37 95       	ror	r19
 780:	27 95       	ror	r18
 782:	a7 95       	ror	r26
 784:	f0 40       	sbci	r31, 0x00	; 0
 786:	53 95       	inc	r21
 788:	c9 f7       	brne	.-14     	; 0x77c <__addsf3x+0x4e>
 78a:	7e f4       	brtc	.+30     	; 0x7aa <__addsf3x+0x7c>
 78c:	1f 16       	cp	r1, r31
 78e:	ba 0b       	sbc	r27, r26
 790:	62 0b       	sbc	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	ba f0       	brmi	.+46     	; 0x7c6 <__addsf3x+0x98>
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	a1 f0       	breq	.+40     	; 0x7c4 <__addsf3x+0x96>
 79c:	ff 0f       	add	r31, r31
 79e:	bb 1f       	adc	r27, r27
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	c2 f7       	brpl	.-16     	; 0x798 <__addsf3x+0x6a>
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <__addsf3x+0x98>
 7aa:	ba 0f       	add	r27, r26
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 1f       	adc	r23, r19
 7b0:	84 1f       	adc	r24, r20
 7b2:	48 f4       	brcc	.+18     	; 0x7c6 <__addsf3x+0x98>
 7b4:	87 95       	ror	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	08 f0       	brcs	.+2      	; 0x7c4 <__addsf3x+0x96>
 7c2:	b3 cf       	rjmp	.-154    	; 0x72a <__addsf3+0x1e>
 7c4:	93 95       	inc	r25
 7c6:	88 0f       	add	r24, r24
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__addsf3x+0x9e>
 7ca:	99 27       	eor	r25, r25
 7cc:	ee 0f       	add	r30, r30
 7ce:	97 95       	ror	r25
 7d0:	87 95       	ror	r24
 7d2:	08 95       	ret

000007d4 <__cmpsf2>:
 7d4:	03 d0       	rcall	.+6      	; 0x7dc <__fp_cmp>
 7d6:	08 f4       	brcc	.+2      	; 0x7da <__cmpsf2+0x6>
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	08 95       	ret

000007dc <__fp_cmp>:
 7dc:	99 0f       	add	r25, r25
 7de:	00 08       	sbc	r0, r0
 7e0:	55 0f       	add	r21, r21
 7e2:	aa 0b       	sbc	r26, r26
 7e4:	e0 e8       	ldi	r30, 0x80	; 128
 7e6:	fe ef       	ldi	r31, 0xFE	; 254
 7e8:	16 16       	cp	r1, r22
 7ea:	17 06       	cpc	r1, r23
 7ec:	e8 07       	cpc	r30, r24
 7ee:	f9 07       	cpc	r31, r25
 7f0:	c0 f0       	brcs	.+48     	; 0x822 <__fp_cmp+0x46>
 7f2:	12 16       	cp	r1, r18
 7f4:	13 06       	cpc	r1, r19
 7f6:	e4 07       	cpc	r30, r20
 7f8:	f5 07       	cpc	r31, r21
 7fa:	98 f0       	brcs	.+38     	; 0x822 <__fp_cmp+0x46>
 7fc:	62 1b       	sub	r22, r18
 7fe:	73 0b       	sbc	r23, r19
 800:	84 0b       	sbc	r24, r20
 802:	95 0b       	sbc	r25, r21
 804:	39 f4       	brne	.+14     	; 0x814 <__fp_cmp+0x38>
 806:	0a 26       	eor	r0, r26
 808:	61 f0       	breq	.+24     	; 0x822 <__fp_cmp+0x46>
 80a:	23 2b       	or	r18, r19
 80c:	24 2b       	or	r18, r20
 80e:	25 2b       	or	r18, r21
 810:	21 f4       	brne	.+8      	; 0x81a <__fp_cmp+0x3e>
 812:	08 95       	ret
 814:	0a 26       	eor	r0, r26
 816:	09 f4       	brne	.+2      	; 0x81a <__fp_cmp+0x3e>
 818:	a1 40       	sbci	r26, 0x01	; 1
 81a:	a6 95       	lsr	r26
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	81 1d       	adc	r24, r1
 820:	81 1d       	adc	r24, r1
 822:	08 95       	ret

00000824 <__fp_inf>:
 824:	97 f9       	bld	r25, 7
 826:	9f 67       	ori	r25, 0x7F	; 127
 828:	80 e8       	ldi	r24, 0x80	; 128
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	08 95       	ret

00000830 <__fp_nan>:
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	80 ec       	ldi	r24, 0xC0	; 192
 834:	08 95       	ret

00000836 <__fp_pscA>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	09 06       	cpc	r0, r25
 842:	08 95       	ret

00000844 <__fp_pscB>:
 844:	00 24       	eor	r0, r0
 846:	0a 94       	dec	r0
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	05 06       	cpc	r0, r21
 850:	08 95       	ret

00000852 <__fp_round>:
 852:	09 2e       	mov	r0, r25
 854:	03 94       	inc	r0
 856:	00 0c       	add	r0, r0
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0xc>
 85a:	88 23       	and	r24, r24
 85c:	52 f0       	brmi	.+20     	; 0x872 <__fp_round+0x20>
 85e:	bb 0f       	add	r27, r27
 860:	40 f4       	brcc	.+16     	; 0x872 <__fp_round+0x20>
 862:	bf 2b       	or	r27, r31
 864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0x18>
 866:	60 ff       	sbrs	r22, 0
 868:	04 c0       	rjmp	.+8      	; 0x872 <__fp_round+0x20>
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__fp_split3>:
 874:	57 fd       	sbrc	r21, 7
 876:	90 58       	subi	r25, 0x80	; 128
 878:	44 0f       	add	r20, r20
 87a:	55 1f       	adc	r21, r21
 87c:	59 f0       	breq	.+22     	; 0x894 <__fp_splitA+0x10>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	71 f0       	breq	.+28     	; 0x89e <__fp_splitA+0x1a>
 882:	47 95       	ror	r20

00000884 <__fp_splitA>:
 884:	88 0f       	add	r24, r24
 886:	97 fb       	bst	r25, 7
 888:	99 1f       	adc	r25, r25
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_splitA+0x20>
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	79 f0       	breq	.+30     	; 0x8ae <__fp_splitA+0x2a>
 890:	87 95       	ror	r24
 892:	08 95       	ret
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	14 06       	cpc	r1, r20
 89a:	55 1f       	adc	r21, r21
 89c:	f2 cf       	rjmp	.-28     	; 0x882 <__fp_split3+0xe>
 89e:	46 95       	lsr	r20
 8a0:	f1 df       	rcall	.-30     	; 0x884 <__fp_splitA>
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__fp_splitA+0x30>
 8a4:	16 16       	cp	r1, r22
 8a6:	17 06       	cpc	r1, r23
 8a8:	18 06       	cpc	r1, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	f1 cf       	rjmp	.-30     	; 0x890 <__fp_splitA+0xc>
 8ae:	86 95       	lsr	r24
 8b0:	71 05       	cpc	r23, r1
 8b2:	61 05       	cpc	r22, r1
 8b4:	08 94       	sec
 8b6:	08 95       	ret

000008b8 <__fp_zero>:
 8b8:	e8 94       	clt

000008ba <__fp_szero>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	66 27       	eor	r22, r22
 8be:	77 27       	eor	r23, r23
 8c0:	cb 01       	movw	r24, r22
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
